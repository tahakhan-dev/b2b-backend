import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { AppModule } from './app.module';
import rateLimit from 'express-rate-limit';
import helmet from "helmet";



async function bootstrap() {

  const APP_PORT = process.env.PORT

  const app = await NestFactory.create(AppModule);

  app.use(helmet());

  app.useGlobalPipes( // Here, we are setting transform to true to enable automatic data transformation and whitelist to true to strip any properties that are not decorated with validation decorators
    new ValidationPipe({
      transform: true,
      whitelist: true,
    }),
  );


  // rate limit for the APIS
  app.use(
    rateLimit({
      windowMs: 5 * 60 * 1000, // 5 minutes
      max: 100, // limit each IP to 100 requests per windowMs,
      message: "Too many request created from this IP, please try again after an 5 minutes"
    }),
  );

  // ClassSerializerInterceptor is a built-in interceptor that serializes response data objects to their corresponding class instances.
  // app.get(Reflector) retrieves the Reflector instance from the application context. The Reflector is used to access metadata associated with classes, methods, and parameters

  // app.useGlobalInterceptors(new ClassSerializerInterceptor(app.get(Reflector)));  // app.useGlobalInterceptors(new ClassSerializerInterceptor(app.get(Reflector))), you are adding the ClassSerializerInterceptor to the global interceptors of your application. This means that the interceptor will be applied to all responses generated by your application, unless you disable it on a per-controller or per-method basis.


  app.setGlobalPrefix(process.env.GLOABAL_API_PREFIX);


  // This function enables the automatic handling of shutdown signals or events by registering shutdown hooks in the application.

  app.enableShutdownHooks()

  await app.listen(APP_PORT, () => {
    console.log(`API GATEWAY IS RUNNING ON ${APP_PORT}`);

  });
}
bootstrap();
